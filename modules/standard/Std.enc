module Std

EMBED
#include "./src/runtime/pony/libponyrt/actor/messageq.h"
#include <stdatomic.h>

extern pony_msg_t* ponyint_messageq_pop(messageq_t* q);
END

typedef AtomicQ = EMBED void * END

-- This is currenly just a marker interface. In the future, id
-- might contain the logic for giving objects ids.
read trait Id
end

-- Equivalence is currently only supported on a given type. In
-- the future, other solutions are planned, possibly including a
-- self type instead of this type parameter.
read trait Eq[t]
  require def eq(other:t) : bool
end

active trait Actor
  def atomic(q : AtomicQ) : unit
    EMBED (unit)
      12;
    END    
  end
  def perform[t](f : () -> t) : t
    f()
  end
end

active class Main
  def main() : unit
    ()
  end
end
